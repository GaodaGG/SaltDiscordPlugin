<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsAPI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsAPI.java" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import okhttp3.Response;&#10;import java.io.IOException;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;/**&#10; * TaskbarLyrics API封装类&#10; * 移植自JavaScript的TaskbarLyricsAPI功能&#10; */&#10;public class TaskbarLyricsAPI {&#10;    private final TaskbarLyricsClient client;&#10;    &#10;    public TaskbarLyricsAPI(TaskbarLyricsClient client) {&#10;        this.client = client;&#10;    }&#10;    &#10;    /**&#10;     * 字体相关API&#10;     */&#10;    public static class FontAPI {&#10;        private final TaskbarLyricsClient client;&#10;        &#10;        public FontAPI(TaskbarLyricsClient client) {&#10;            this.client = client;&#10;        }&#10;        &#10;        /**&#10;         * 设置字体&#10;         */&#10;        public CompletableFuture&lt;Response&gt; font(Object params) {&#10;            return client.fetch(&quot;/font/font&quot;, params);&#10;        }&#10;        &#10;        /**&#10;         * 设置字体颜色&#10;         */&#10;        public CompletableFuture&lt;Response&gt; color(Object params) {&#10;            return client.fetch(&quot;/font/color&quot;, params);&#10;        }&#10;        &#10;        /**&#10;         * 设置字体样式&#10;         */&#10;        public CompletableFuture&lt;Response&gt; style(Object params) {&#10;            return client.fetch(&quot;/font/style&quot;, params);&#10;        }&#10;        &#10;        // 同步版本&#10;        public Response fontSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/font/font&quot;, params);&#10;        }&#10;        &#10;        public Response colorSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/font/color&quot;, params);&#10;        }&#10;        &#10;        public Response styleSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/font/style&quot;, params);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 歌词相关API&#10;     */&#10;    public static class LyricsAPI {&#10;        private final TaskbarLyricsClient client;&#10;        &#10;        public LyricsAPI(TaskbarLyricsClient client) {&#10;            this.client = client;&#10;        }&#10;        &#10;        /**&#10;         * 设置歌词内容&#10;         */&#10;        public CompletableFuture&lt;Response&gt; lyrics(Object params) {&#10;            return client.fetch(&quot;/lyrics/lyrics&quot;, params);&#10;        }&#10;        &#10;        /**&#10;         * 设置歌词对齐方式&#10;         */&#10;        public CompletableFuture&lt;Response&gt; align(Object params) {&#10;            return client.fetch(&quot;/lyrics/align&quot;, params);&#10;        }&#10;        &#10;        // 同步版本&#10;        public Response lyricsSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/lyrics/lyrics&quot;, params);&#10;        }&#10;        &#10;        public Response alignSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/lyrics/align&quot;, params);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 窗口相关API&#10;     */&#10;    public static class WindowAPI {&#10;        private final TaskbarLyricsClient client;&#10;        &#10;        public WindowAPI(TaskbarLyricsClient client) {&#10;            this.client = client;&#10;        }&#10;        &#10;        /**&#10;         * 设置窗口位置&#10;         */&#10;        public CompletableFuture&lt;Response&gt; position(Object params) {&#10;            return client.fetch(&quot;/window/position&quot;, params);&#10;        }&#10;        &#10;        /**&#10;         * 设置窗口边距&#10;         */&#10;        public CompletableFuture&lt;Response&gt; margin(Object params) {&#10;            return client.fetch(&quot;/window/margin&quot;, params);&#10;        }&#10;        &#10;        /**&#10;         * 设置屏幕&#10;         */&#10;        public CompletableFuture&lt;Response&gt; screen(Object params) {&#10;            return client.fetch(&quot;/window/screen&quot;, params);&#10;        }&#10;        &#10;        // 同步版本&#10;        public Response positionSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/window/position&quot;, params);&#10;        }&#10;        &#10;        public Response marginSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/window/margin&quot;, params);&#10;        }&#10;        &#10;        public Response screenSync(Object params) throws IOException {&#10;            return client.fetchSync(&quot;/window/screen&quot;, params);&#10;        }&#10;    }&#10;    &#10;    // API实例&#10;    public final FontAPI font;&#10;    public final LyricsAPI lyrics;&#10;    public final WindowAPI window;&#10;    &#10;    public TaskbarLyricsAPI(TaskbarLyricsClient client) {&#10;        this.client = client;&#10;        this.font = new FontAPI(client);&#10;        this.lyrics = new LyricsAPI(client);&#10;        this.window = new WindowAPI(client);&#10;    }&#10;    &#10;    /**&#10;     * 关闭连接&#10;     */&#10;    public CompletableFuture&lt;Response&gt; close(Object params) {&#10;        return client.fetch(&quot;/close&quot;, params);&#10;    }&#10;    &#10;    /**&#10;     * 关闭连接 (同步版本)&#10;     */&#10;    public Response closeSync(Object params) throws IOException {&#10;        return client.fetchSync(&quot;/close&quot;, params);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsClient.java" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import okhttp3.*;&#10;import com.google.gson.Gson;&#10;import com.google.gson.GsonBuilder;&#10;import java.io.IOException;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * TaskbarLyrics HTTP客户端&#10; * 移植自JavaScript的TaskbarLyricsFetch功能&#10; */&#10;public class TaskbarLyricsClient {&#10;    private static final String BASE_URL = &quot;http://127.0.0.1:%d/taskbar&quot;;&#10;    private static final MediaType JSON = MediaType.get(&quot;application/json; charset=utf-8&quot;);&#10;    &#10;    private final OkHttpClient httpClient;&#10;    private final Gson gson;&#10;    private final int port;&#10;    &#10;    public TaskbarLyricsClient(int betterncmApiPort) {&#10;        this.port = betterncmApiPort - 2; // TaskbarLyricsPort = BETTERNCM_API_PORT - 2&#10;        &#10;        this.httpClient = new OkHttpClient.Builder()&#10;                .connectTimeout(5, TimeUnit.SECONDS)&#10;                .writeTimeout(10, TimeUnit.SECONDS)&#10;                .readTimeout(10, TimeUnit.SECONDS)&#10;                .build();&#10;                &#10;        this.gson = new GsonBuilder()&#10;                .setPrettyPrinting()&#10;                .create();&#10;    }&#10;    &#10;    /**&#10;     * 发送POST请求到TaskbarLyrics服务器&#10;     * @param path API路径&#10;     * @param params 请求参数&#10;     * @return CompletableFuture&lt;Response&gt;&#10;     */&#10;    public CompletableFuture&lt;Response&gt; fetch(String path, Object params) {&#10;        String url = String.format(BASE_URL, port) + path;&#10;        String jsonBody = gson.toJson(params);&#10;        &#10;        RequestBody body = RequestBody.create(jsonBody, JSON);&#10;        Request request = new Request.Builder()&#10;                .url(url)&#10;                .post(body)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .build();&#10;        &#10;        CompletableFuture&lt;Response&gt; future = new CompletableFuture&lt;&gt;();&#10;        &#10;        httpClient.newCall(request).enqueue(new Callback() {&#10;            @Override&#10;            public void onFailure(Call call, IOException e) {&#10;                future.completeExceptionally(e);&#10;            }&#10;            &#10;            @Override&#10;            public void onResponse(Call call, Response response) {&#10;                future.complete(response);&#10;            }&#10;        });&#10;        &#10;        return future;&#10;    }&#10;    &#10;    /**&#10;     * 同步版本的fetch方法&#10;     * @param path API路径&#10;     * @param params 请求参数&#10;     * @return Response&#10;     * @throws IOException 网络异常&#10;     */&#10;    public Response fetchSync(String path, Object params) throws IOException {&#10;        String url = String.format(BASE_URL, port) + path;&#10;        String jsonBody = gson.toJson(params);&#10;        &#10;        RequestBody body = RequestBody.create(jsonBody, JSON);&#10;        Request request = new Request.Builder()&#10;                .url(url)&#10;                .post(body)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .build();&#10;        &#10;        return httpClient.newCall(request).execute();&#10;    }&#10;    &#10;    /**&#10;     * 关闭HTTP客户端&#10;     */&#10;    public void close() {&#10;        httpClient.dispatcher().executorService().shutdown();&#10;        httpClient.connectionPool().evictAll();&#10;        if (httpClient.cache() != null) {&#10;            try {&#10;                httpClient.cache().close();&#10;            } catch (IOException e) {&#10;                // 忽略关闭异常&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsConfig.java" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * TaskbarLyrics配置类&#10; * 移植自JavaScript的defaultConfig和pluginConfig&#10; */&#10;public class TaskbarLyricsConfig {&#10;    &#10;    /**&#10;     * 颜色配置&#10;     */&#10;    public static class ColorConfig {&#10;        public int hexColor;&#10;        public double opacity;&#10;        &#10;        public ColorConfig(int hexColor, double opacity) {&#10;            this.hexColor = hexColor;&#10;            this.opacity = opacity;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 字体粗细配置&#10;     */&#10;    public static class FontWeightConfig {&#10;        public int value;&#10;        public String textContent;&#10;        &#10;        public FontWeightConfig(int value, String textContent) {&#10;            this.value = value;&#10;            this.textContent = textContent;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 字体配置&#10;     */&#10;    public static class FontConfig {&#10;        public String fontFamily;&#10;        &#10;        public FontConfig(String fontFamily) {&#10;            this.fontFamily = fontFamily;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 颜色主题配置&#10;     */&#10;    public static class ColorThemeConfig {&#10;        public ColorConfig light;&#10;        public ColorConfig dark;&#10;        &#10;        public ColorThemeConfig(ColorConfig light, ColorConfig dark) {&#10;            this.light = light;&#10;            this.dark = dark;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 字体样式配置&#10;     */&#10;    public static class FontStyleConfig {&#10;        public FontWeightConfig weight;&#10;        public int slope;&#10;        public boolean underline;&#10;        public boolean strikethrough;&#10;        &#10;        public FontStyleConfig(FontWeightConfig weight, int slope, boolean underline, boolean strikethrough) {&#10;            this.weight = weight;&#10;            this.slope = slope;&#10;            this.underline = underline;&#10;            this.strikethrough = strikethrough;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 选项配置（带值和文本描述）&#10;     */&#10;    public static class OptionConfig {&#10;        public int value;&#10;        public String textContent;&#10;        &#10;        public OptionConfig(int value, String textContent) {&#10;            this.value = value;&#10;            this.textContent = textContent;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 边距配置&#10;     */&#10;    public static class MarginConfig {&#10;        public int left;&#10;        public int right;&#10;        &#10;        public MarginConfig(int left, int right) {&#10;            this.left = left;&#10;            this.right = right;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 屏幕配置&#10;     */&#10;    public static class ScreenConfig {&#10;        public OptionConfig parentTaskbar;&#10;        &#10;        public ScreenConfig(String value, String textContent) {&#10;            this.parentTaskbar = new OptionConfig(0, textContent); // 使用0作为默认值&#10;            // 实际存储字符串值&#10;            this.parentTaskbar = new OptionConfig(value.hashCode(), textContent);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 获取默认配置&#10;     */&#10;    public static Map&lt;String, Object&gt; getDefaultConfig() {&#10;        Map&lt;String, Object&gt; config = new HashMap&lt;&gt;();&#10;        &#10;        // 字体配置&#10;        Map&lt;String, Object&gt; font = new HashMap&lt;&gt;();&#10;        font.put(&quot;font_family&quot;, &quot;Microsoft YaHei UI&quot;);&#10;        config.put(&quot;font&quot;, font);&#10;        &#10;        // 颜色配置&#10;        Map&lt;String, Object&gt; color = new HashMap&lt;&gt;();&#10;        Map&lt;String, Object&gt; basic = new HashMap&lt;&gt;();&#10;        basic.put(&quot;light&quot;, new ColorConfig(0x000000, 1.0));&#10;        basic.put(&quot;dark&quot;, new ColorConfig(0xFFFFFF, 1.0));&#10;        color.put(&quot;basic&quot;, basic);&#10;        &#10;        Map&lt;String, Object&gt; extra = new HashMap&lt;&gt;();&#10;        extra.put(&quot;light&quot;, new ColorConfig(0x000000, 1.0));&#10;        extra.put(&quot;dark&quot;, new ColorConfig(0xFFFFFF, 1.0));&#10;        color.put(&quot;extra&quot;, extra);&#10;        config.put(&quot;color&quot;, color);&#10;        &#10;        // 样式配置&#10;        Map&lt;String, Object&gt; style = new HashMap&lt;&gt;();&#10;        Map&lt;String, Object&gt; basicStyle = new HashMap&lt;&gt;();&#10;        basicStyle.put(&quot;weight&quot;, new FontWeightConfig(WindowsEnum.DWriteFontWeight.NORMAL, &quot;Normal (400)&quot;));&#10;        basicStyle.put(&quot;slope&quot;, WindowsEnum.DWriteFontStyle.NORMAL);&#10;        basicStyle.put(&quot;underline&quot;, false);&#10;        basicStyle.put(&quot;strikethrough&quot;, false);&#10;        style.put(&quot;basic&quot;, basicStyle);&#10;        &#10;        Map&lt;String, Object&gt; extraStyle = new HashMap&lt;&gt;();&#10;        extraStyle.put(&quot;weight&quot;, new FontWeightConfig(WindowsEnum.DWriteFontWeight.NORMAL, &quot;Normal (400)&quot;));&#10;        extraStyle.put(&quot;slope&quot;, WindowsEnum.DWriteFontStyle.NORMAL);&#10;        extraStyle.put(&quot;underline&quot;, false);&#10;        extraStyle.put(&quot;strikethrough&quot;, false);&#10;        style.put(&quot;extra&quot;, extraStyle);&#10;        config.put(&quot;style&quot;, style);&#10;        &#10;        // 歌词配置&#10;        Map&lt;String, Object&gt; lyrics = new HashMap&lt;&gt;();&#10;        lyrics.put(&quot;retrieval_method&quot;, new OptionConfig(1, &quot;使用LibLyric解析获取歌词&quot;));&#10;        config.put(&quot;lyrics&quot;, lyrics);&#10;        &#10;        // 效果配置&#10;        Map&lt;String, Object&gt; effect = new HashMap&lt;&gt;();&#10;        effect.put(&quot;next_line_lyrics_position&quot;, new OptionConfig(0, &quot;副歌词，下句歌词显示在这&quot;));&#10;        effect.put(&quot;extra_show&quot;, new OptionConfig(2, &quot;当前翻译，没则用上个选项&quot;));&#10;        effect.put(&quot;adjust&quot;, 0.0);&#10;        config.put(&quot;effect&quot;, effect);&#10;        &#10;        // 对齐配置&#10;        Map&lt;String, Object&gt; align = new HashMap&lt;&gt;();&#10;        align.put(&quot;basic&quot;, WindowsEnum.DWriteTextAlignment.LEADING);&#10;        align.put(&quot;extra&quot;, WindowsEnum.DWriteTextAlignment.LEADING);&#10;        config.put(&quot;align&quot;, align);&#10;        &#10;        // 位置配置&#10;        Map&lt;String, Object&gt; position = new HashMap&lt;&gt;();&#10;        position.put(&quot;position&quot;, new OptionConfig(WindowsEnum.WindowAlignment.ADAPTIVE, &quot;自动，自适应选择左或右&quot;));&#10;        config.put(&quot;position&quot;, position);&#10;        &#10;        // 边距配置&#10;        config.put(&quot;margin&quot;, new MarginConfig(0, 0));&#10;        &#10;        // 屏幕配置&#10;        Map&lt;String, Object&gt; screen = new HashMap&lt;&gt;();&#10;        screen.put(&quot;parent_taskbar&quot;, new OptionConfig(0, &quot;主屏幕任务栏&quot;));&#10;        config.put(&quot;screen&quot;, screen);&#10;        &#10;        return config;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsExample.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsExample.java" />
              <option name="originalContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import okhttp3.Response;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;/**&#10; * TaskbarLyrics使用示例&#10; * 演示如何使用移植的HTTP通讯功能&#10; */&#10;public class TaskbarLyricsExample {&#10;&#10;    /**&#10;     * 使用示例&#10;     */&#10;    public static void example() {&#10;        // 假设BETTERNCM_API_PORT为3000&#10;        int betterncmApiPort = 3800;&#10;&#10;        // 创建TaskbarLyrics管理器&#10;        TaskbarLyricsManager manager = new TaskbarLyricsManager(betterncmApiPort);&#10;&#10;        try {&#10;            // === 字体设置示例 ===&#10;&#10;            // 设置字体族&#10;            Map&lt;String, Object&gt; fontParams = new HashMap&lt;&gt;();&#10;            fontParams.put(&quot;font_family&quot;, &quot;Microsoft YaHei UI&quot;);&#10;&#10;            // 异步调用&#10;            CompletableFuture&lt;Response&gt; fontFuture = manager.setFont(fontParams);&#10;            fontFuture.thenAccept(response -&gt; {&#10;                if (response.isSuccessful()) {&#10;                    System.out.println(&quot;字体设置成功&quot;);&#10;                } else {&#10;                    System.out.println(&quot;字体设置失败: &quot; + response.code());&#10;                }&#10;                response.close();&#10;            }).exceptionally(throwable -&gt; {&#10;                System.err.println(&quot;字体设置异常: &quot; + throwable.getMessage());&#10;                return null;&#10;            });&#10;&#10;            // === 颜色设置示例 ===&#10;&#10;            Map&lt;String, Object&gt; colorParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; basicColor = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; lightColor = new HashMap&lt;&gt;();&#10;            lightColor.put(&quot;hex_color&quot;, 0x000000);&#10;            lightColor.put(&quot;opacity&quot;, 1.0);&#10;            basicColor.put(&quot;light&quot;, lightColor);&#10;            colorParams.put(&quot;basic&quot;, basicColor);&#10;&#10;            // 同步调用&#10;            try {&#10;                Response colorResponse = manager.setFontColorSync(colorParams);&#10;                if (colorResponse.isSuccessful()) {&#10;                    System.out.println(&quot;颜色设置成功&quot;);&#10;                } else {&#10;                    System.out.println(&quot;颜色设置失败: &quot; + colorResponse.code());&#10;                }&#10;                colorResponse.close();&#10;            } catch (IOException e) {&#10;                System.err.println(&quot;颜色设置异常: &quot; + e.getMessage());&#10;            }&#10;&#10;            // === 歌词设置示例 ===&#10;&#10;            Map&lt;String, Object&gt; lyricsParams = new HashMap&lt;&gt;();&#10;            lyricsParams.put(&quot;current&quot;, &quot;当前歌词内容&quot;);&#10;            lyricsParams.put(&quot;next&quot;, &quot;下一句歌词内容&quot;);&#10;&#10;            manager.setLyrics(lyricsParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;lyrics successfully set&quot;);&#10;                    }&#10;                    response.close();&#10;                })&#10;                .exceptionally(throwable -&gt; {&#10;                    System.err.println(&quot;lyrics error: &quot; + throwable.getMessage());&#10;                    return null;&#10;                });&#10;&#10;            // === 窗口位置设置示例 ===&#10;&#10;            Map&lt;String, Object&gt; positionParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; position = new HashMap&lt;&gt;();&#10;            position.put(&quot;value&quot;, WindowsEnum.WindowAlignment.CENTER);&#10;            position.put(&quot;textContent&quot;, &quot;居中对齐&quot;);&#10;            positionParams.put(&quot;position&quot;, position);&#10;&#10;            manager.setWindowPosition(positionParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;窗口位置设置成功&quot;);&#10;                    }&#10;                    response.close();&#10;                });&#10;&#10;            // === 使用默认配置 ===&#10;&#10;            Map&lt;String, Object&gt; defaultFontConfig = manager.getDefaultConfig(&quot;font&quot;);&#10;            System.out.println(&quot;默认字体配置: &quot; + defaultFontConfig);&#10;&#10;            // === 直接使用API ===&#10;&#10;            TaskbarLyricsAPI api = manager.getAPI();&#10;&#10;            // 设置字体样式&#10;            Map&lt;String, Object&gt; styleParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; basicStyle = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; weight = new HashMap&lt;&gt;();&#10;            weight.put(&quot;value&quot;, WindowsEnum.DWriteFontWeight.BOLD);&#10;            weight.put(&quot;textContent&quot;, &quot;Bold (700)&quot;);&#10;            basicStyle.put(&quot;weight&quot;, weight);&#10;            basicStyle.put(&quot;slope&quot;, WindowsEnum.DWriteFontStyle.NORMAL);&#10;            basicStyle.put(&quot;underline&quot;, false);&#10;            basicStyle.put(&quot;strikethrough&quot;, false);&#10;            styleParams.put(&quot;basic&quot;, basicStyle);&#10;&#10;            api.font.style(styleParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;字体样式设置成功&quot;);&#10;                    }&#10;                    response.close();&#10;                });&#10;&#10;            // 等待一段时间以便异步操作完成&#10;            Thread.sleep(2000);&#10;&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;            System.err.println(&quot;线程被中断: &quot; + e.getMessage());&#10;        } finally {&#10;            // 关闭资源&#10;            manager.shutdown();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 演示如何处理配置&#10;     */&#10;    public static void configExample() {&#10;        // 获取默认配置&#10;        Map&lt;String, Object&gt; defaultConfig = TaskbarLyricsConfig.getDefaultConfig();&#10;&#10;        System.out.println(&quot;=== 默认配置 ===&quot;);&#10;        defaultConfig.forEach((key, value) -&gt; {&#10;            System.out.println(key + &quot;: &quot; + value);&#10;        });&#10;&#10;//        new TaskbarLyricsClient();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;TaskbarLyrics Java HTTP客户端示例&quot;);&#10;&#10;        // 运行配置示例&#10;//        configExample();&#10;&#10;        // 运行HTTP通讯示例&#10;         example(); // 取消注释以运行实际的HTTP请求示例&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import okhttp3.Response;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;/**&#10; * TaskbarLyrics Usage Example&#10; * Demonstrates how to use the ported HTTP communication functionality&#10; */&#10;public class TaskbarLyricsExample {&#10;&#10;    /**&#10;     * Usage example&#10;     */&#10;    public static void example() {&#10;        // Assume BETTERNCM_API_PORT is 3800&#10;        int betterncmApiPort = 3800;&#10;&#10;        // Create TaskbarLyrics manager&#10;        TaskbarLyricsManager manager = new TaskbarLyricsManager(betterncmApiPort);&#10;&#10;        try {&#10;            // === Font setting example ===&#10;&#10;            // Set font family&#10;            Map&lt;String, Object&gt; fontParams = new HashMap&lt;&gt;();&#10;            fontParams.put(&quot;font_family&quot;, &quot;Microsoft YaHei UI&quot;);&#10;&#10;            // Async call&#10;            CompletableFuture&lt;Response&gt; fontFuture = manager.setFont(fontParams);&#10;            fontFuture.thenAccept(response -&gt; {&#10;                if (response.isSuccessful()) {&#10;                    System.out.println(&quot;Font set successfully&quot;);&#10;                } else {&#10;                    System.out.println(&quot;Font setting failed: &quot; + response.code());&#10;                }&#10;                response.close();&#10;            }).exceptionally(throwable -&gt; {&#10;                System.err.println(&quot;Font setting error: &quot; + throwable.getMessage());&#10;                return null;&#10;            });&#10;&#10;            // === Color setting example ===&#10;&#10;            Map&lt;String, Object&gt; colorParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; basicColor = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; lightColor = new HashMap&lt;&gt;();&#10;            lightColor.put(&quot;hex_color&quot;, 0x000000);&#10;            lightColor.put(&quot;opacity&quot;, 1.0);&#10;            basicColor.put(&quot;light&quot;, lightColor);&#10;            colorParams.put(&quot;basic&quot;, basicColor);&#10;&#10;            // Sync call&#10;            try {&#10;                Response colorResponse = manager.setFontColorSync(colorParams);&#10;                if (colorResponse.isSuccessful()) {&#10;                    System.out.println(&quot;Color set successfully&quot;);&#10;                } else {&#10;                    System.out.println(&quot;Color setting failed: &quot; + colorResponse.code());&#10;                }&#10;                colorResponse.close();&#10;            } catch (IOException e) {&#10;                System.err.println(&quot;Color setting error: &quot; + e.getMessage());&#10;            }&#10;&#10;            // === Lyrics setting example ===&#10;&#10;            Map&lt;String, Object&gt; lyricsParams = new HashMap&lt;&gt;();&#10;            lyricsParams.put(&quot;current&quot;, &quot;Current lyrics content&quot;);&#10;            lyricsParams.put(&quot;next&quot;, &quot;Next line lyrics content&quot;);&#10;&#10;            manager.setLyrics(lyricsParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;Lyrics set successfully&quot;);&#10;                    }&#10;                    response.close();&#10;                })&#10;                .exceptionally(throwable -&gt; {&#10;                    System.err.println(&quot;Lyrics setting error: &quot; + throwable.getMessage());&#10;                    return null;&#10;                });&#10;&#10;            // === Window position setting example ===&#10;&#10;            Map&lt;String, Object&gt; positionParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; position = new HashMap&lt;&gt;();&#10;            position.put(&quot;value&quot;, WindowsEnum.WindowAlignment.CENTER);&#10;            position.put(&quot;textContent&quot;, &quot;Center alignment&quot;);&#10;            positionParams.put(&quot;position&quot;, position);&#10;&#10;            manager.setWindowPosition(positionParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;Window position set successfully&quot;);&#10;                    }&#10;                    response.close();&#10;                });&#10;&#10;            // === Using default configuration ===&#10;&#10;            Map&lt;String, Object&gt; defaultFontConfig = manager.getDefaultConfig(&quot;font&quot;);&#10;            System.out.println(&quot;Default font config: &quot; + defaultFontConfig);&#10;&#10;            // === Direct API usage ===&#10;&#10;            TaskbarLyricsAPI api = manager.getAPI();&#10;&#10;            // Set font style&#10;            Map&lt;String, Object&gt; styleParams = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; basicStyle = new HashMap&lt;&gt;();&#10;            Map&lt;String, Object&gt; weight = new HashMap&lt;&gt;();&#10;            weight.put(&quot;value&quot;, WindowsEnum.DWriteFontWeight.BOLD);&#10;            weight.put(&quot;textContent&quot;, &quot;Bold (700)&quot;);&#10;            basicStyle.put(&quot;weight&quot;, weight);&#10;            basicStyle.put(&quot;slope&quot;, WindowsEnum.DWriteFontStyle.NORMAL);&#10;            basicStyle.put(&quot;underline&quot;, false);&#10;            basicStyle.put(&quot;strikethrough&quot;, false);&#10;            styleParams.put(&quot;basic&quot;, basicStyle);&#10;&#10;            api.font.style(styleParams)&#10;                .thenAccept(response -&gt; {&#10;                    if (response.isSuccessful()) {&#10;                        System.out.println(&quot;Font style set successfully&quot;);&#10;                    }&#10;                    response.close();&#10;                });&#10;&#10;            // Wait for async operations to complete&#10;            Thread.sleep(2000);&#10;&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;            System.err.println(&quot;Thread interrupted: &quot; + e.getMessage());&#10;        } finally {&#10;            // Close resources&#10;            manager.shutdown();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Demonstrates how to handle configuration&#10;     */&#10;    public static void configExample() {&#10;        // Get default configuration&#10;        Map&lt;String, Object&gt; defaultConfig = TaskbarLyricsConfig.getDefaultConfig();&#10;&#10;        System.out.println(&quot;=== Default Configuration ===&quot;);&#10;        defaultConfig.forEach((key, value) -&gt; {&#10;            System.out.println(key + &quot;: &quot; + value);&#10;        });&#10;&#10;        // Demonstrate usage of Windows enums&#10;        System.out.println(&quot;\n=== Windows Enum Constants ===&quot;);&#10;        System.out.println(&quot;Window Alignment - Center: &quot; + WindowsEnum.WindowAlignment.CENTER);&#10;        System.out.println(&quot;Text Alignment - Center: &quot; + WindowsEnum.DWriteTextAlignment.CENTER);&#10;        System.out.println(&quot;Font Weight - Bold: &quot; + WindowsEnum.DWriteFontWeight.BOLD);&#10;        System.out.println(&quot;Font Style - Italic: &quot; + WindowsEnum.DWriteFontStyle.ITALIC);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;TaskbarLyrics Java HTTP Client Example&quot;);&#10;&#10;        // Run configuration example&#10;//        configExample();&#10;&#10;        // Run HTTP communication example&#10;         example(); // Uncomment to run actual HTTP request example&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/TaskbarLyricsManager.java" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;import okhttp3.Response;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;/**&#10; * TaskbarLyrics管理类&#10; * 移植自JavaScript的base.js，整合所有TaskbarLyrics功能&#10; */&#10;public class TaskbarLyricsManager {&#10;    private final TaskbarLyricsClient client;&#10;    private final TaskbarLyricsAPI api;&#10;    private final Map&lt;String, Object&gt; defaultConfig;&#10;    private final int taskbarLyricsPort;&#10;    &#10;    public TaskbarLyricsManager(int betterncmApiPort) {&#10;        this.taskbarLyricsPort = betterncmApiPort - 2;&#10;        this.client = new TaskbarLyricsClient(betterncmApiPort);&#10;        this.api = new TaskbarLyricsAPI(client);&#10;        this.defaultConfig = TaskbarLyricsConfig.getDefaultConfig();&#10;    }&#10;    &#10;    /**&#10;     * 获取TaskbarLyrics端口&#10;     */&#10;    public int getTaskbarLyricsPort() {&#10;        return taskbarLyricsPort;&#10;    }&#10;    &#10;    /**&#10;     * 获取API实例&#10;     */&#10;    public TaskbarLyricsAPI getAPI() {&#10;        return api;&#10;    }&#10;    &#10;    /**&#10;     * 获取Windows枚举常量&#10;     */&#10;    public WindowsEnum getWindowsEnum() {&#10;        return new WindowsEnum();&#10;    }&#10;    &#10;    /**&#10;     * 获取默认配置&#10;     */&#10;    public Map&lt;String, Object&gt; getDefaultConfig() {&#10;        return defaultConfig;&#10;    }&#10;    &#10;    /**&#10;     * 获取指定名称的默认配置&#10;     */&#10;    @SuppressWarnings(&quot;unchecked&quot;)&#10;    public Map&lt;String, Object&gt; getDefaultConfig(String name) {&#10;        Object config = defaultConfig.get(name);&#10;        if (config instanceof Map) {&#10;            return (Map&lt;String, Object&gt;) config;&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // === 便捷方法：字体相关 ===&#10;    &#10;    /**&#10;     * 设置字体&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setFont(Object params) {&#10;        return api.font.font(params);&#10;    }&#10;    &#10;    /**&#10;     * 设置字体颜色&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setFontColor(Object params) {&#10;        return api.font.color(params);&#10;    }&#10;    &#10;    /**&#10;     * 设置字体样式&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setFontStyle(Object params) {&#10;        return api.font.style(params);&#10;    }&#10;    &#10;    // === 便捷方法：歌词相关 ===&#10;    &#10;    /**&#10;     * 设置歌词内容&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setLyrics(Object params) {&#10;        return api.lyrics.lyrics(params);&#10;    }&#10;    &#10;    /**&#10;     * 设置歌词对齐方式&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setLyricsAlign(Object params) {&#10;        return api.lyrics.align(params);&#10;    }&#10;    &#10;    // === 便捷方法：窗口相关 ===&#10;    &#10;    /**&#10;     * 设置窗口位置&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setWindowPosition(Object params) {&#10;        return api.window.position(params);&#10;    }&#10;    &#10;    /**&#10;     * 设置窗口边距&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setWindowMargin(Object params) {&#10;        return api.window.margin(params);&#10;    }&#10;    &#10;    /**&#10;     * 设置屏幕&#10;     */&#10;    public CompletableFuture&lt;Response&gt; setWindowScreen(Object params) {&#10;        return api.window.screen(params);&#10;    }&#10;    &#10;    // === 同步版本的便捷方法 ===&#10;    &#10;    public Response setFontSync(Object params) throws IOException {&#10;        return api.font.fontSync(params);&#10;    }&#10;    &#10;    public Response setFontColorSync(Object params) throws IOException {&#10;        return api.font.colorSync(params);&#10;    }&#10;    &#10;    public Response setFontStyleSync(Object params) throws IOException {&#10;        return api.font.styleSync(params);&#10;    }&#10;    &#10;    public Response setLyricsSync(Object params) throws IOException {&#10;        return api.lyrics.lyricsSync(params);&#10;    }&#10;    &#10;    public Response setLyricsAlignSync(Object params) throws IOException {&#10;        return api.lyrics.alignSync(params);&#10;    }&#10;    &#10;    public Response setWindowPositionSync(Object params) throws IOException {&#10;        return api.window.positionSync(params);&#10;    }&#10;    &#10;    public Response setWindowMarginSync(Object params) throws IOException {&#10;        return api.window.marginSync(params);&#10;    }&#10;    &#10;    public Response setWindowScreenSync(Object params) throws IOException {&#10;        return api.window.screenSync(params);&#10;    }&#10;    &#10;    /**&#10;     * 关闭TaskbarLyrics&#10;     */&#10;    public CompletableFuture&lt;Response&gt; close(Object params) {&#10;        return api.close(params);&#10;    }&#10;    &#10;    /**&#10;     * 关闭TaskbarLyrics (同步版本)&#10;     */&#10;    public Response closeSync(Object params) throws IOException {&#10;        return api.closeSync(params);&#10;    }&#10;    &#10;    /**&#10;     * 关闭HTTP客户端资源&#10;     */&#10;    public void shutdown() {&#10;        client.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/WindowsEnum.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/WindowsEnum.java" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin;&#10;&#10;/**&#10; * Windows枚举常量&#10; * 移植自JavaScript的WindowsEnum&#10; */&#10;public class WindowsEnum {&#10;    &#10;    /**&#10;     * 窗口对齐方式&#10;     */&#10;    public static class WindowAlignment {&#10;        public static final int ADAPTIVE = 0;  // WindowAlignmentAdaptive&#10;        public static final int LEFT = 1;      // WindowAlignmentLeft&#10;        public static final int CENTER = 2;    // WindowAlignmentCenter&#10;        public static final int RIGHT = 3;     // WindowAlignmentRight&#10;    }&#10;    &#10;    /**&#10;     * DirectWrite文本对齐方式&#10;     */&#10;    public static class DWriteTextAlignment {&#10;        public static final int LEADING = 0;    // DWRITE_TEXT_ALIGNMENT_LEADING&#10;        public static final int TRAILING = 1;   // DWRITE_TEXT_ALIGNMENT_TRAILING&#10;        public static final int CENTER = 2;     // DWRITE_TEXT_ALIGNMENT_CENTER&#10;        public static final int JUSTIFIED = 3;  // DWRITE_TEXT_ALIGNMENT_JUSTIFIED&#10;    }&#10;    &#10;    /**&#10;     * DirectWrite字体粗细&#10;     */&#10;    public static class DWriteFontWeight {&#10;        public static final int THIN = 100;         // DWRITE_FONT_WEIGHT_THIN&#10;        public static final int EXTRA_LIGHT = 200; // DWRITE_FONT_WEIGHT_EXTRA_LIGHT&#10;        public static final int ULTRA_LIGHT = 200; // DWRITE_FONT_WEIGHT_ULTRA_LIGHT&#10;        public static final int LIGHT = 300;       // DWRITE_FONT_WEIGHT_LIGHT&#10;        public static final int SEMI_LIGHT = 350;  // DWRITE_FONT_WEIGHT_SEMI_LIGHT&#10;        public static final int NORMAL = 400;      // DWRITE_FONT_WEIGHT_NORMAL&#10;        public static final int REGULAR = 400;     // DWRITE_FONT_WEIGHT_REGULAR&#10;        public static final int MEDIUM = 500;      // DWRITE_FONT_WEIGHT_MEDIUM&#10;        public static final int DEMI_BOLD = 600;   // DWRITE_FONT_WEIGHT_DEMI_BOLD&#10;        public static final int SEMI_BOLD = 600;   // DWRITE_FONT_WEIGHT_SEMI_BOLD&#10;        public static final int BOLD = 700;        // DWRITE_FONT_WEIGHT_BOLD&#10;        public static final int EXTRA_BOLD = 800;  // DWRITE_FONT_WEIGHT_EXTRA_BOLD&#10;        public static final int ULTRA_BOLD = 800;  // DWRITE_FONT_WEIGHT_ULTRA_BOLD&#10;        public static final int BLACK = 900;       // DWRITE_FONT_WEIGHT_BLACK&#10;        public static final int HEAVY = 900;       // DWRITE_FONT_WEIGHT_HEAVY&#10;        public static final int EXTRA_BLACK = 950; // DWRITE_FONT_WEIGHT_EXTRA_BLACK&#10;        public static final int ULTRA_BLACK = 950; // DWRITE_FONT_WEIGHT_ULTRA_BLACK&#10;    }&#10;    &#10;    /**&#10;     * DirectWrite字体样式&#10;     */&#10;    public static class DWriteFontStyle {&#10;        public static final int NORMAL = 0;   // DWRITE_FONT_STYLE_NORMAL&#10;        public static final int OBLIQUE = 1;  // DWRITE_FONT_STYLE_OBLIQUE&#10;        public static final int ITALIC = 2;   // DWRITE_FONT_STYLE_ITALIC&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/taskbarlyrics/api/TaskbarLyricsAPI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltDiscordPlugin/taskbarlyrics/api/TaskbarLyricsAPI.java" />
              <option name="originalContent" value="package com.gg.SaltDiscordPlugin.taskbarlyrics.api;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.gg.SaltDiscordPlugin.taskbarlyrics.model.*;&#10;import okhttp3.*;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.io.IOException;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * 任务栏歌词API客户端&#10; * 负责与C++ EXE程序进行HTTP通信&#10; */&#10;public class TaskbarLyricsAPI {&#10;    private static final Logger logger = LoggerFactory.getLogger(TaskbarLyricsAPI.class);&#10;    private static final MediaType JSON = MediaType.get(&quot;application/json; charset=utf-8&quot;);&#10;    &#10;    private final OkHttpClient client;&#10;    private final ObjectMapper objectMapper;&#10;    private final String baseUrl;&#10;    &#10;    public TaskbarLyricsAPI(int port) {&#10;        this.baseUrl = &quot;http://127.0.0.1:&quot; + port + &quot;/taskbar&quot;;&#10;        this.objectMapper = new ObjectMapper();&#10;        this.client = new OkHttpClient.Builder()&#10;                .connectTimeout(5, TimeUnit.SECONDS)&#10;                .writeTimeout(10, TimeUnit.SECONDS)&#10;                .readTimeout(30, TimeUnit.SECONDS)&#10;                .build();&#10;        &#10;        logger.info(&quot;TaskbarLyricsAPI initialized with port: {}&quot;, port);&#10;    }&#10;    &#10;    /**&#10;     * 发送POST请求的通用方法&#10;     */&#10;    private boolean sendRequest(String path, Object data) {&#10;        try {&#10;            String jsonData = objectMapper.writeValueAsString(data);&#10;            RequestBody body = RequestBody.create(jsonData, JSON);&#10;            &#10;            Request request = new Request.Builder()&#10;                    .url(baseUrl + path)&#10;                    .post(body)&#10;                    .build();&#10;            &#10;            try (Response response = client.newCall(request).execute()) {&#10;                if (response.isSuccessful()) {&#10;                    logger.debug(&quot;Successfully sent request to {}: {}&quot;, path, jsonData);&#10;                    return true;&#10;                } else {&#10;                    logger.error(&quot;Request failed to {}: HTTP {}&quot;, path, response.code());&#10;                    return false;&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            logger.error(&quot;Failed to send request to {}: {}&quot;, path, e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 字体相关API&#10;     */&#10;    public static class FontAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        FontAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setFont(FontConfig config) {&#10;            return api.sendRequest(&quot;/font/font&quot;, config);&#10;        }&#10;        &#10;        public boolean setColor(ColorConfig config) {&#10;            return api.sendRequest(&quot;/font/color&quot;, config);&#10;        }&#10;        &#10;        public boolean setStyle(StyleConfig config) {&#10;            return api.sendRequest(&quot;/font/style&quot;, config);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 歌词相关API&#10;     */&#10;    public static class LyricsAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        LyricsAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setLyrics(LyricsConfig config) {&#10;            return api.sendRequest(&quot;/lyrics/lyrics&quot;, config);&#10;        }&#10;        &#10;        public boolean setLyrics(String basic, String extra) {&#10;            return setLyrics(new LyricsConfig(basic, extra));&#10;        }&#10;        &#10;        public boolean setAlign(AlignConfig config) {&#10;            return api.sendRequest(&quot;/lyrics/align&quot;, config);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 窗口相关API&#10;     */&#10;    public static class WindowAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        WindowAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setPosition(PositionConfig config) {&#10;            return api.sendRequest(&quot;/window/position&quot;, config);&#10;        }&#10;        &#10;        public boolean setMargin(MarginConfig config) {&#10;            return api.sendRequest(&quot;/window/margin&quot;, config);&#10;        }&#10;        &#10;        public boolean setMargin(int left, int right) {&#10;            return setMargin(new MarginConfig(left, right));&#10;        }&#10;        &#10;        public boolean setScreen(ScreenConfig config) {&#10;            return api.sendRequest(&quot;/window/screen&quot;, config);&#10;        }&#10;    }&#10;    &#10;    // API实例&#10;    private final FontAPI fontAPI = new FontAPI(this);&#10;    private final LyricsAPI lyricsAPI = new LyricsAPI(this);&#10;    private final WindowAPI windowAPI = new WindowAPI(this);&#10;    &#10;    // Getter方法&#10;    public FontAPI font() { return fontAPI; }&#10;    public LyricsAPI lyrics() { return lyricsAPI; }&#10;    public WindowAPI window() { return windowAPI; }&#10;    &#10;    /**&#10;     * 关闭任务栏歌词程序&#10;     */&#10;    public boolean close() {&#10;        return sendRequest(&quot;/close&quot;, new Object());&#10;    }&#10;    &#10;    /**&#10;     * 关闭HTTP客户端资源&#10;     */&#10;    public void shutdown() {&#10;        client.dispatcher().executorService().shutdown();&#10;        client.connectionPool().evictAll();&#10;        logger.info(&quot;TaskbarLyricsAPI shutdown completed&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gg.SaltDiscordPlugin.taskbarlyrics.api;&#10;&#10;import com.google.gson.Gson;&#10;import com.gg.SaltDiscordPlugin.taskbarlyrics.model.*;&#10;import okhttp3.*;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.io.IOException;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * 任务栏歌词API客户端&#10; * 负责与C++ EXE程序进行HTTP通信&#10; */&#10;public class TaskbarLyricsAPI {&#10;    private static final Logger logger = LoggerFactory.getLogger(TaskbarLyricsAPI.class);&#10;    private static final MediaType JSON = MediaType.get(&quot;application/json; charset=utf-8&quot;);&#10;    &#10;    private final OkHttpClient client;&#10;    private final Gson gson;&#10;    private final String baseUrl;&#10;    &#10;    public TaskbarLyricsAPI(int port) {&#10;        this.baseUrl = &quot;http://127.0.0.1:&quot; + port + &quot;/taskbar&quot;;&#10;        this.gson = new Gson();&#10;        this.client = new OkHttpClient.Builder()&#10;                .connectTimeout(5, TimeUnit.SECONDS)&#10;                .writeTimeout(10, TimeUnit.SECONDS)&#10;                .readTimeout(30, TimeUnit.SECONDS)&#10;                .build();&#10;        &#10;        logger.info(&quot;TaskbarLyricsAPI initialized with port: {}&quot;, port);&#10;    }&#10;    &#10;    /**&#10;     * 发送POST请求的通用方法&#10;     */&#10;    private boolean sendRequest(String path, Object data) {&#10;        try {&#10;            String jsonData = gson.toJson(data);&#10;            RequestBody body = RequestBody.create(jsonData, JSON);&#10;            &#10;            Request request = new Request.Builder()&#10;                    .url(baseUrl + path)&#10;                    .post(body)&#10;                    .build();&#10;            &#10;            try (Response response = client.newCall(request).execute()) {&#10;                if (response.isSuccessful()) {&#10;                    logger.debug(&quot;Successfully sent request to {}: {}&quot;, path, jsonData);&#10;                    return true;&#10;                } else {&#10;                    logger.error(&quot;Request failed to {}: HTTP {}&quot;, path, response.code());&#10;                    return false;&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            logger.error(&quot;Failed to send request to {}: {}&quot;, path, e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 字体相关API&#10;     */&#10;    public static class FontAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        FontAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setFont(FontConfig config) {&#10;            return api.sendRequest(&quot;/font/font&quot;, config);&#10;        }&#10;        &#10;        public boolean setColor(ColorConfig config) {&#10;            return api.sendRequest(&quot;/font/color&quot;, config);&#10;        }&#10;        &#10;        public boolean setStyle(StyleConfig config) {&#10;            return api.sendRequest(&quot;/font/style&quot;, config);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 歌词相关API&#10;     */&#10;    public static class LyricsAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        LyricsAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setLyrics(LyricsConfig config) {&#10;            return api.sendRequest(&quot;/lyrics/lyrics&quot;, config);&#10;        }&#10;        &#10;        public boolean setLyrics(String basic, String extra) {&#10;            return setLyrics(new LyricsConfig(basic, extra));&#10;        }&#10;        &#10;        public boolean setAlign(AlignConfig config) {&#10;            return api.sendRequest(&quot;/lyrics/align&quot;, config);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 窗口相关API&#10;     */&#10;    public static class WindowAPI {&#10;        private final TaskbarLyricsAPI api;&#10;        &#10;        WindowAPI(TaskbarLyricsAPI api) {&#10;            this.api = api;&#10;        }&#10;        &#10;        public boolean setPosition(PositionConfig config) {&#10;            return api.sendRequest(&quot;/window/position&quot;, config);&#10;        }&#10;        &#10;        public boolean setMargin(MarginConfig config) {&#10;            return api.sendRequest(&quot;/window/margin&quot;, config);&#10;        }&#10;        &#10;        public boolean setMargin(int left, int right) {&#10;            return setMargin(new MarginConfig(left, right));&#10;        }&#10;        &#10;        public boolean setScreen(ScreenConfig config) {&#10;            return api.sendRequest(&quot;/window/screen&quot;, config);&#10;        }&#10;    }&#10;    &#10;    // API实例&#10;    private final FontAPI fontAPI = new FontAPI(this);&#10;    private final LyricsAPI lyricsAPI = new LyricsAPI(this);&#10;    private final WindowAPI windowAPI = new WindowAPI(this);&#10;    &#10;    // Getter方法&#10;    public FontAPI font() { return fontAPI; }&#10;    public LyricsAPI lyrics() { return lyricsAPI; }&#10;    public WindowAPI window() { return windowAPI; }&#10;    &#10;    /**&#10;     * 关闭任务栏歌词程序&#10;     */&#10;    public boolean close() {&#10;        return sendRequest(&quot;/close&quot;, new Object());&#10;    }&#10;    &#10;    /**&#10;     * 关闭HTTP客户端资源&#10;     */&#10;    public void shutdown() {&#10;        client.dispatcher().executorService().shutdown();&#10;        client.connectionPool().evictAll();&#10;        logger.info(&quot;TaskbarLyricsAPI shutdown completed&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltSteamPlugin/SteamApiNative.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltSteamPlugin/SteamApiNative.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gg/SaltSteamPlugin/discord/DiscordSDK.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gg/SaltSteamPlugin/discord/DiscordSDK.java" />
              <option name="originalContent" value="package com.gg.SaltSteamPlugin.discord;&#10;&#10;import com.sun.jna.Library;&#10;import com.sun.jna.Native;&#10;import com.sun.jna.Pointer;&#10;import com.sun.jna.Structure;&#10;import com.sun.jna.Callback;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.StandardCopyOption;&#10;&#10;public interface DiscordSDK extends Library {&#10;    DiscordSDK INSTANCE = loadLibrary();&#10;&#10;    static DiscordSDK loadLibrary() {&#10;        try {&#10;            // 首先尝试从系统路径加载&#10;            return Native.load(&quot;discord_partner_sdk&quot;, DiscordSDK.class);&#10;        } catch (UnsatisfiedLinkError e1) {&#10;            try {&#10;                // 尝试从资源文件中提取并加载&#10;                String libraryName = &quot;discord_partner_sdk.dll&quot;;&#10;                InputStream is = DiscordSDK.class.getResourceAsStream(&quot;/&quot; + libraryName);&#10;                if (is != null) {&#10;                    // 创建临时文件&#10;                    Path tempFile = Files.createTempFile(&quot;discord_partner_sdk&quot;, &quot;.dll&quot;);&#10;                    Files.copy(is, tempFile, StandardCopyOption.REPLACE_EXISTING);&#10;                    is.close();&#10;&#10;                    // 从临时文件加载&#10;                    return Native.load(tempFile.toString(), DiscordSDK.class);&#10;                }&#10;            } catch (IOException e2) {&#10;                // 忽略并继续下一个尝试&#10;            }&#10;&#10;            // 最后尝试从当前目录加载&#10;            try {&#10;                File dllFile = new File(&quot;discord_partner_sdk.dll&quot;);&#10;                if (dllFile.exists()) {&#10;                    return Native.load(dllFile.getAbsolutePath(), DiscordSDK.class);&#10;                }&#10;            } catch (UnsatisfiedLinkError e3) {&#10;                // 忽略&#10;            }&#10;&#10;            // 所有方法都失败，抛出原始异常&#10;            throw new RuntimeException(&quot;无法加载 Discord SDK 库文件: &quot; + e1.getMessage(), e1);&#10;        }&#10;    }&#10;&#10;    // Discord Result枚举&#10;    int DiscordResult_Ok = 0;&#10;    int DiscordResult_ServiceUnavailable = 1;&#10;    int DiscordResult_InvalidVersion = 2;&#10;    int DiscordResult_LockFailed = 3;&#10;    int DiscordResult_InternalError = 4;&#10;    int DiscordResult_InvalidPayload = 5;&#10;    int DiscordResult_InvalidCommand = 6;&#10;    int DiscordResult_InvalidPermissions = 7;&#10;    int DiscordResult_NotFetched = 8;&#10;    int DiscordResult_NotFound = 9;&#10;    int DiscordResult_Conflict = 10;&#10;    int DiscordResult_InvalidSecret = 11;&#10;    int DiscordResult_InvalidJoinSecret = 12;&#10;    int DiscordResult_NoEligibleActivity = 13;&#10;    int DiscordResult_Invited = 14;&#10;    int DiscordResult_DiscordNotInstalled = 15;&#10;    int DiscordResult_InsufficientBuffer = 16;&#10;    int DiscordResult_PurchaseCanceled = 17;&#10;    int DiscordResult_InvalidGuild = 18;&#10;    int DiscordResult_InvalidEvent = 19;&#10;    int DiscordResult_InvalidChannel = 20;&#10;    int DiscordResult_InvalidOrigin = 21;&#10;    int DiscordResult_RateLimited = 22;&#10;    int DiscordResult_OAuth2Error = 23;&#10;    int DiscordResult_SelectChannelTimeout = 24;&#10;    int DiscordResult_GetGuildTimeout = 25;&#10;    int DiscordResult_SelectVoiceForceRequired = 26;&#10;    int DiscordResult_CaptureShortcutAlreadyListening = 27;&#10;    int DiscordResult_UnauthorizedForAchievement = 28;&#10;    int DiscordResult_InvalidGiftCode = 29;&#10;    int DiscordResult_PurchaseError = 30;&#10;    int DiscordResult_TransactionAborted = 31;&#10;    &#10;    // 回调接口&#10;    interface DiscordCallback extends Callback {&#10;        void callback(int result, Pointer ref);&#10;    }&#10;    &#10;    // 创建Discord实例&#10;    int DiscordCreate(long version, Pointer createParams, Pointer result);&#10;    &#10;    // 运行回调&#10;    int DiscordRunCallbacks(Pointer discord);&#10;    &#10;    // 销毁实例&#10;    void DiscordDestroy(Pointer discord);&#10;    &#10;    // Activity Manager相关方法&#10;    Pointer DiscordGetActivityManager(Pointer discord);&#10;    int DiscordActivityManagerUpdateActivity(Pointer manager, Pointer activity, Pointer callbackData, DiscordCallback callback);&#10;    int DiscordActivityManagerClearActivity(Pointer manager, Pointer callbackData, DiscordCallback callback);&#10;}" />
              <option name="updatedContent" value="package com.gg.SaltSteamPlugin.discord;&#10;&#10;import com.sun.jna.Library;&#10;import com.sun.jna.Native;&#10;import com.sun.jna.Pointer;&#10;import com.sun.jna.Structure;&#10;import com.sun.jna.Callback;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.StandardCopyOption;&#10;&#10;public interface DiscordSDK extends Library {&#10;    DiscordSDK INSTANCE = loadLibrary();&#10;&#10;    static DiscordSDK loadLibrary() {&#10;        try {&#10;            // 首先尝试从系统路径加载&#10;            return Native.load(&quot;discord_partner_sdk&quot;, DiscordSDK.class);&#10;        } catch (UnsatisfiedLinkError e1) {&#10;            try {&#10;                // 尝试从资源文件中提取并加载&#10;                String libraryName = &quot;discord_partner_sdk.dll&quot;;&#10;                InputStream is = DiscordSDK.class.getResourceAsStream(&quot;/&quot; + libraryName);&#10;                if (is != null) {&#10;                    // 创建临时文件&#10;                    Path tempFile = Files.createTempFile(&quot;discord_partner_sdk&quot;, &quot;.dll&quot;);&#10;                    Files.copy(is, tempFile, StandardCopyOption.REPLACE_EXISTING);&#10;                    is.close();&#10;&#10;                    // 从临时文件加载&#10;                    return Native.load(tempFile.toString(), DiscordSDK.class);&#10;                }&#10;            } catch (IOException e2) {&#10;                // 忽略并继续下一个尝试&#10;            }&#10;&#10;            // 最后尝试从当前目录加载&#10;            try {&#10;                File dllFile = new File(&quot;discord_partner_sdk.dll&quot;);&#10;                if (dllFile.exists()) {&#10;                    return Native.load(dllFile.getAbsolutePath(), DiscordSDK.class);&#10;                }&#10;            } catch (UnsatisfiedLinkError e3) {&#10;                // 忽略&#10;            }&#10;&#10;            // 所有方法都失败，抛出原始异常&#10;            throw new RuntimeException(&quot;无法加载 Discord SDK 库文件: &quot; + e1.getMessage(), e1);&#10;        }&#10;    }&#10;&#10;    // Discord Result枚举&#10;    int DiscordResult_Ok = 0;&#10;    int DiscordResult_ServiceUnavailable = 1;&#10;    int DiscordResult_InvalidVersion = 2;&#10;    int DiscordResult_LockFailed = 3;&#10;    int DiscordResult_InternalError = 4;&#10;    int DiscordResult_InvalidPayload = 5;&#10;    int DiscordResult_InvalidCommand = 6;&#10;    int DiscordResult_InvalidPermissions = 7;&#10;    int DiscordResult_NotFetched = 8;&#10;    int DiscordResult_NotFound = 9;&#10;    int DiscordResult_Conflict = 10;&#10;    int DiscordResult_InvalidSecret = 11;&#10;    int DiscordResult_InvalidJoinSecret = 12;&#10;    int DiscordResult_NoEligibleActivity = 13;&#10;    int DiscordResult_Invited = 14;&#10;    int DiscordResult_DiscordNotInstalled = 15;&#10;    int DiscordResult_InsufficientBuffer = 16;&#10;    int DiscordResult_PurchaseCanceled = 17;&#10;    int DiscordResult_InvalidGuild = 18;&#10;    int DiscordResult_InvalidEvent = 19;&#10;    int DiscordResult_InvalidChannel = 20;&#10;    int DiscordResult_InvalidOrigin = 21;&#10;    int DiscordResult_RateLimited = 22;&#10;    int DiscordResult_OAuth2Error = 23;&#10;    int DiscordResult_SelectChannelTimeout = 24;&#10;    int DiscordResult_GetGuildTimeout = 25;&#10;    int DiscordResult_SelectVoiceForceRequired = 26;&#10;    int DiscordResult_CaptureShortcutAlreadyListening = 27;&#10;    int DiscordResult_UnauthorizedForAchievement = 28;&#10;    int DiscordResult_InvalidGiftCode = 29;&#10;    int DiscordResult_PurchaseError = 30;&#10;    int DiscordResult_TransactionAborted = 31;&#10;    &#10;    // 回调接口&#10;    interface DiscordCallback extends Callback {&#10;        void callback(int result, Pointer ref);&#10;    }&#10;    &#10;    // 创建Discord实例&#10;    int DiscordCreate(long version, Pointer createParams, Pointer result);&#10;    &#10;    // 运行回调&#10;    int DiscordRunCallbacks(Pointer discord);&#10;    &#10;    // 销毁实例&#10;    void DiscordDestroy(Pointer discord);&#10;    &#10;    // Activity Manager相关方法&#10;    Pointer DiscordGetActivityManager(Pointer discord);&#10;    int DiscordActivityManagerUpdateActivity(Pointer manager, Pointer activity, Pointer callbackData, DiscordCallback callback);&#10;    int DiscordActivityManagerClearActivity(Pointer manager, Pointer callbackData, DiscordCallback callback);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>